<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <artifactId>sam-tracer</artifactId>
    <groupId>io.github.flaz14</groupId>
    <version>1.0-SNAPSHOT</version>
  </parent>

  <artifactId>loader</artifactId>

  <properties>
    <!-- It will be better do not hardcode the `artifactId` and the path to the agent's module.
     Some standard Maven's property should be used instead. But seems that in Maven it's impossible
     to get the path to child module (via parent) and use it as property in POM. -->
    <java-agent.artifactId>java-agent</java-agent.artifactId>
    <java-agent.source.path>../${java-agent.artifactId}/target</java-agent.source.path>
    <java-agent.destination.path>alienated</java-agent.destination.path>
    <java-agent.jar>${java-agent.artifactId}.jar</java-agent.jar>
  </properties>

  <!-- The agent's artifact is included as dependency because we need the corresponding JAR-file before
   this module will be packaged. -->
  <dependencies>
    <dependency>
      <groupId>io.github.flaz14</groupId>
      <artifactId>java-agent</artifactId>
      <version>1.0-SNAPSHOT</version>
      <!-- The agent is completely independent JAR. So `test` scope is used here in order to eliminate
       any compile time dependencies on the agent. -->
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-java-agent-jar</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.outputDirectory}/${java-agent.destination.path}</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/${java-agent.source.path}</directory>
                  <includes>
                    <include>${java-agent.jar}</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <resources>
      <resource>
        <directory>${project.build.resources[0].directory}</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
  </build>
</project>